name: maes-platform

services:
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: maes-postgres
    environment:
      POSTGRES_DB: maes_db
      POSTGRES_USER: maes_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-maes_secure_password}
    # Removed port exposure for security - database only accessible internally
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/02-run-migrations.sh:/docker-entrypoint-initdb.d/02-run-migrations.sh
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - maes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maes_user -d maes_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: maes-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    # Removed port exposure for security - Redis only accessible internally
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - maes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  api:
    build: ./api
    image: maes-api:latest
    container_name: maes-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://maes_user:${POSTGRES_PASSWORD:-maes_secure_password}@postgres:5432/maes_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      SERVICE_AUTH_TOKEN: ${SERVICE_AUTH_TOKEN:-service_internal_token_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-secret-key-here!}
      SIEM_EXPORT_LIMIT: ${SIEM_EXPORT_LIMIT:-1000}
      SIEM_RATE_LIMIT: ${SIEM_RATE_LIMIT:-50}
      PORT: 3000
      # Domain configuration for CORS
      DOMAIN: ${DOMAIN:-localhost}
      PUBLIC_IP: ${PUBLIC_IP:-}
      FRONTEND_URL: ${FRONTEND_URL:-}
      CORS_ORIGIN: ${CORS_ORIGIN:-}
    # Port 3000 is internal only - accessed via nginx proxy
    # For development, uncomment the line below:
    # ports:
    #   - "3000:3000"
    volumes:
      - ./certs:/app/certs:ro
      - extractor_output:/output:ro
      - user_certificates:/app/uploads/certificates
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maes-network
    restart: unless-stopped
    command: ${API_COMMAND:-node src/index.js}

  extractor:
    build: ./services/extractor
    image: maes-extractor:latest
    container_name: maes-extractor
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      DATABASE_URL: postgresql://maes_user:${POSTGRES_PASSWORD:-maes_secure_password}@postgres:5432/maes_db
      SERVICE_AUTH_TOKEN: ${SERVICE_AUTH_TOKEN:-service_internal_token_change_in_production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: ${NODE_ENV:-production}
      POWERShell_TIMEOUT: ${POWERShell_TIMEOUT:-1800000}
      QUEUE_STALLED_INTERVAL: ${QUEUE_STALLED_INTERVAL:-30000}
      QUEUE_MAX_STALLED_COUNT: ${QUEUE_MAX_STALLED_COUNT:-1}
    volumes:
      - extractor_output:/output
      - ./certs:/certs:ro
      - user_certificates:/user_certificates:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - maes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3

  analyzer:
    build: ./services/analyzer
    image: maes-analyzer:latest
    container_name: maes-analyzer
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      DATABASE_URL: postgresql://maes_user:${POSTGRES_PASSWORD:-maes_secure_password}@postgres:5432/maes_db
      SERVICE_AUTH_TOKEN: ${SERVICE_AUTH_TOKEN:-service_internal_token_change_in_production}
    volumes:
      - extractor_output:/output:ro
      - analyzer_output:/analyzer_output
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - maes-network
    restart: unless-stopped

  compliance:
    build: ./services/compliance
    image: maes-compliance:latest
    container_name: maes-compliance
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      DATABASE_URL: postgresql://maes_user:${POSTGRES_PASSWORD:-maes_secure_password}@postgres:5432/maes_db
      SERVICE_AUTH_TOKEN: ${SERVICE_AUTH_TOKEN:-service_internal_token_change_in_production}
      COMPLIANCE_PORT: 3002
      LOG_LEVEL: info
      CERT_PASSWORD: ${CERT_PASSWORD:-Password123}
    volumes:
      - ./certs:/certs:ro
      - compliance-reports:/app/reports
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - maes-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    image: maes-frontend:latest
    container_name: maes-frontend
    environment:
      # Frontend configuration - API accessed through nginx proxy
      VITE_API_URL: ${API_URL:-https://localhost}
      # SSL and domain configuration
      DOMAIN: ${DOMAIN:-localhost}
      USE_LETS_ENCRYPT: ${USE_LETS_ENCRYPT:-false}
      LETSENCRYPT_STAGING: ${LETSENCRYPT_STAGING:-false}
    ports:
      - "80:80"    # HTTP redirect to HTTPS
      - "443:443"  # HTTPS main port
    depends_on:
      - api
    networks:
      - maes-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: maes-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://localhost/prometheus/'
      - '--web.route-prefix=/'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - maes-network
    restart: unless-stopped
    depends_on:
      - api
      - extractor
      - analyzer

  grafana:
    image: grafana/grafana:11.3.1
    container_name: maes-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://localhost/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_STATIC_ROOT_PATH=/usr/share/grafana/public
      - GF_SERVER_ENABLE_GZIP=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - maes-network
    restart: unless-stopped
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:3.3.1
    container_name: maes-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - maes-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.3.1
    container_name: maes-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - maes-network
    restart: unless-stopped
    depends_on:
      - loki

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.50.0
    container_name: maes-cadvisor
    # Removed privileged mode for security - may reduce some monitoring capabilities
    # privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      # Reduced volume mounts for security - only essential monitoring directories
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Removed full root filesystem mount for security
      # - /:/rootfs:ro
    ports:
      - "8080:8080"
    networks:
      - maes-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  extractor_output:
  analyzer_output:
  prometheus_data:
  grafana_data:
  loki_data:
  user_certificates:
  compliance-reports:

networks:
  maes-network:
    driver: bridge